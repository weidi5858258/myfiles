#include <stdlib.h>
#include <stdio.h>

Error:Execution failed for task ':app:transformNativeLibsWithStripDebugSymbolForDebug'.
> java.lang.NullPointerException (no error message)

Error:Execution failed for task ':app:compileDebugNdk'.
> com.android.ide.common.process.ProcessException: Error while executing process D:\Tools\AndroidSDK\windows\AndroidSDK\ndk-bundle\ndk-build.cmd with arguments {NDK_PROJECT_PATH=null APP_BUILD_SCRIPT=D:\workspace\jni\app\build\intermediates\ndk\debug\Android.mk APP_PLATFORM=android-25 NDK_OUT=D:\workspace\jni\app\build\intermediates\ndk\debug\obj NDK_LIBS_OUT=D:\workspace\jni\app\build\intermediates\ndk\debug\lib APP_ABI=all}

用ndk-build命令编译时遇到的问题
Android NDK: WARNING: APP_PLATFORM android-17 is higher than android:minSdkVersion 1 in D:/workspace/jni/app/src/main/AndroidManifest.xml. NDK binaries will *not* be comptible with devices older than android-17. See https://android.googlesource.com/platform/ndk/+/master/docs/user/common_problems.md for more information.
解决方法：
在AndroidManifest.xml中指定<uses-sdk android:minSdkVersion="17"/>
最小版本

make: *** No rule to make target `D:/Tools/AndroidSDK/windows/AndroidSDK/ndk-bundle/build//../build/core/com_weidi_jni_JniUtils.c', needed by `D:/workspace/jni/app/src/main/obj/local/arm64-v8a/objs/test_exe/com_weidi_jni_JniUtils.o'.  Stop.


ndk-build NDK_PROJECT_PATH=./ APP_BUILD_SCRIPT=./Android.mk NDK_APPLICATION_MK=./Application.mk

Error:Execution failed for task ':app:clean'.
> Unable to delete directory: D:\workspace\jni\app\build\intermediates\classes\debug







#define STACK_NUM 3
char DevName[DEV_NAME_MAX];
sprintf(DevName, "/dev/video0");
sprintf(DevName, "/dev/video%d", i);
int mCameraFd = open(DevName, O_RDWR | O_NONBLOCK);
int ret = close(mCameraFd);
mCameraFd = -1;
if (mCameraFd < 0) {
    LOGI("");
    return;
}
固定操作方式
struct v4l2_capability cap;
int ret = ioctl(mCameraFd, VIDIOC_QUERYCAP, &cap);
if (ret < 0) {
    LOGE("");
    return ret;
}
if (!(cap.capabilities & capabilities)) {
	LOGE("");
    return V4L2_ERROR;
}

bool checkError(int return_value, const char *func, int line) {
    if (return_value < 0) {
        LOGI("%s::%d fail. errno: %s", func, line, strerror(errno));
        return true;
    }
    return false;
}

static const int CAMERA_RESULT_SUCCESS = 0;

remove("/data/local/artifact/image.jpg");
指针需要初始化为NULL,不了安全
ImageInfo *mImageInfo[STACK_NUM];
构造中初始化
for (int i = 0; i < STACK_NUM; ++i) {
    mImageInfo[i] = NULL;
}

const char *path;
FILE *fp;
// 打开文件
if ((fp = fopen(path, "r")) == NULL) {
    LOGI("%s open failed.", path);
    return 0;
}
// 跳到文件末尾
fseek(fp, 0, SEEK_END);
// 得到文件长度
size_t length = ftell(fp);

定义一个enum
typedef enum _ssm_Result {
	SSM_RESULT_OK = 0,					/*!< OK. No problem */
	SSM_RESULT_ERROR,					/*!< NG. general error */
	SSM_RESULT_E_POINTER_NULL,			/*!< NG. null pointer */
	SSM_RESULT_E_INVALID_PARAMS,		/*!< NG. invalid parameter input */
	SSM_RESULT_E_MEM_ALLOC,				/*!< NG. failed allocating memory */
	SSM_RESULT_E_BUSY,					/*!< NG. busy */
	SSM_RESULT_E_THREAD,				/*!< NG. thread access failure */
	SSM_RESULT_E_INSTANCE,				/*!< NG. instance creation / access failure */
	SSM_RESULT_E_ABORT,					/*!< NG. operation aborted */
	SSM_RESULT_E_NOT_INITIALIZED,		/*!< NG. something not initialized */
	SSM_RESULT_OK_FILE_ACCESS,			/*!< OK. file access ended success */
	SSM_RESULT_E_FILE_ACCESS,			/*!< NG. file access ended failure */
	SSM_RESULT_E_UNEXPECTED,			/*!< NG. unexpected error */
	SSM_RESULT_E_NOTIMPL,				/*!< NG. function not implemented */
	SSM_RESULT_FILE_CREATED,			/*!< New File created ack */
	SSM_RESULT_CANCELED,				/*!< Operation canceled ack */
	SSM_RESULT_E_NODATA,				/*!< NG. No data found */
	SSM_RESULT_MAX						/* don't move this */
} ssm_Result;	
ssm_Result SBehaviorAnalyzer_ReleaseResultArray(SBA_Result *pResult, sbap_HANDLE p_handle);

static MyImageAnalyzer *mInstance;
static MyImageAnalyzer *getInstance() {
    return mInstance;
}

/*YUV_420_888 format*/
if ((imageLength * 2) / 3 != (width * height)) {
    LOGI("Image size is invalid");
    return false;
}

/*YUYV format*/
if ((imageLength / 2) != (width * height)) {
    LOGI("Image size is invalid");
    return false;
}

if (mGrayData != NULL) {
    free(mGrayData);
    mGrayData = NULL;
}
mGrayData = (unsigned char *) malloc(width * height);
memset(mGrayData, 0, width * height);

open阶段:
只是打开设备,然后检查设备打开是否成功,
再对这个设备的文件描述符作判断是否允许
这个设备操作有关功能.


信号量sem_t的使用:
#include<semaphore.h>
1.
定义变量
sem_t mController;
2.
初始化
sem_init(&mController, 0, 1);
3.
使用
第一种方式
sem_wait(&mController);
// dosomething
sem_post(&mController);
第二种方式
if (sem_trywait(&mController) != 0) {
    if (errno == EAGAIN) {
        LOGI("mController is busy.");
        return RESULT_OK;
    } else {
        LOGI("mController try wait failed.");
        return 0x00030005;
    }
}
// dosomething
sem_post(&mController);
4.
回收资源
sem_destroy(&mController);


struct fields_t {
    jfieldID context;

    jmethodID cryptoInfoSetID;
};
static fields_t gFields;

// FindClass
jclass clazz = env->FindClass("android/media/MediaExtractor");
CHECK(clazz != NULL);
// GetFieldID
gFields.context = env->GetFieldID(clazz, "mNativeContext", "J");
CHECK(gFields.context != NULL); 
clazz = env->FindClass("android/media/MediaCodec$CryptoInfo");
CHECK(clazz != NULL);
// GetMethodID
gFields.cryptoInfoSetID = env->GetMethodID(clazz, "set", "(I[I[I[B[BI)V");

jobject obj的解释:
如果native方法不是static的话，这个obj就代表这个native方法的类实例
如果native方法是static的话，这个obj就代表这个native方法的类的class对象实例(static方法不需要类实例的，所以就代表这个类的class对象)
// 使用"jobject thiz"这个参数得到java端的Class对象
jclass clazz = env->GetObjectClass(thiz);
CHECK(clazz != NULL);
jclass mClass = (jclass) env->NewGlobalRef(clazz);
jweak mObject = env->NewWeakGlobalRef(thiz);
// 析构
env->DeleteWeakGlobalRef(mObject);
mObject = NULL;
env->DeleteGlobalRef(mClass);
mClass = NULL;
// 创建一个强引用对象
sp<JMediaExtractor> extractor = new JMediaExtractor(env, thiz);
if (extractor != NULL) {
    extractor->incStrong(thiz);
}


















































