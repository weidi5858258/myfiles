在2017年，Linux内核代码，谷歌贡献度是3%，而华为占1.5%。
Android其实是具备公有性质，只要遵循Android的开源协议与开源机制，其他厂商完全可以在已经开源的 Android 之上发展自己的 Android 系统——只要遵循已经开源的 Android 的许可证约束即可。Android 系统主要使用的开源软件许可证有 GPL（Linux 内核）、LGPL（各种运行时函数库）、Apache（Dalvik 虚拟机及 Java 类库）。如果限制某些厂商不能用Andriod，显然也难以避免让其他OMD厂商、芯片厂商甚至软件开发商的利益以及上下游企业的利益受损，基于各自未来前景与利益考量，上下游参与开源联盟的企业也会抵制谷歌破坏开源协议的行为并作出一定的反制措施。
Google移动服务（GMS）是由谷歌提供的一系列应用和服务，包括Gmail，Chrome，Google地图等，为非开源，获得授权需经过谷歌测试。



https://blog.csdn.net/bluewhalerobot/article/details/80429652
hikey 970开发板刷官方的基础固件和Android系统
一.首先下载下面两个文件
git clone https://github.com/96boards-hikey/tools-images-hikey970
(其实是个zip文件,不是rar文件)
wget http://hihope.org/hihope/downLoadCenter/testDownFile?filename=20190403/hikey970_android_8_images.rar
hikey970_android_8_images.rar这个文件解压后有3个文件,为buildinfo.txt文件,image目录和log目录.
二.把image里的所有文件复制到tools-images-hikey970文件夹中
三.烧写分两种情况(开关不要弄错):
1.烧基础固件
烧好基础固件后也有了android系统,因此不需要再额外烧android系统.
可能这个操作只需要做一次,以后只要单纯烧android系统就行了.
	开关: On On On Off
	进行tools-images-hikey970目录
	修改recovery-flash.sh脚本:
	UEFI_BUILD_PATH=/home/qubo/tools-images-hikey970 ---> UEFI_BUILD_PATH=${PWD}
	运行recovery-flash.sh脚本
2.单纯烧android系统
	开关: On Off On Off
	进行tools-images-hikey970目录
	fastboot flash boot boot.img
	fastboot flash cache cache.img
	fastboot flash system system.img
	fastboot flash userdata userdata.img

编译AOSP源码时先需要作下面的操作
复制文件
cp /media/root/alexander/android_source/kernel/linux/arch/arm64/boot/dts/hisilicon/kirin970-hikey970.dtb /media/root/alexander/android_source/aosp/device/linaro/hikey-kernel/kirin970-hikey970.dtb-4.9
cp /media/root/alexander/android_source/kernel/linux/arch/arm64/boot/Image.gz-dtb /media/root/alexander/android_source/aosp/device/linaro/hikey-kernel/Image.gz-hikey970-4.9
修改文件
1.
subl device/linaro/hikey/wpan/uim/Android.mk
LOCAL_MODULE_TAGS := optional
2.
subl out/build-hikey970.ninja
--all-partitions
3.
rm -rf /media/root/alexander/android_source/aosp/device/linaro/hikey/sepolicy/hostapd.te

局部编译时有下面的错误
build/make/core/main.mk:758: error: CtsMediaStressTestCases.LOCAL_HOST_REQUIRED_MODULES : illegal value cts-dynamic-config : not a host module. If you want to specify target modules to be required to be installed along with your target module, add those module names to LOCAL_REQUIRED_MODULES instead.
因此作了下面的修改
---------->1
下面2个文件是修改操作
cts/tests/tests/media/Android.mk
cts/tests/signature/intent-check/Android.mk
把原来的
LOCAL_HOST_REQUIRED_MODULES := cts-dynamic-config
修改为
LOCAL_REQUIRED_MODULES := cts-dynamic-config
---------->2
下面3个文件都是删除操作
build/soong/androidmk/cmd/androidmk/android.go
(delete:129)
"LOCAL_HOST_REQUIRED_MODULES":         "host_required",
build/soong/android/androidmk.go
(delete:180)
a.AddStrings("LOCAL_HOST_REQUIRED_MODULES", a.Host_required...)
build/soong/android/prebuilt_etc_test.go
(delete:158)
"LOCAL_HOST_REQUIRED_MODULES":   {"hostModA", "hostModB"},


第一步: 关于bootloader
# mkdir bootloader
# cd bootloader
下载下面的文件:
	arm-trusted-firmware
	edk2
	l-loader
	OpenPlatformPkg
	tools-images-hikey970
	uefi-tools

# cd edk2
# ln -sf ../OpenPlatformPkg
# cd ..
修改l-loader/build_uefi.sh这个文件的某个bin路径
我的改成了:
"LINARO_GCC_7_1")
	# AARCH64_GCC_7_1=/opt/toolchain/gcc-linaro-7.1.1-2017.08-x86_64_aarch64-linux-gnu/bin/
	AARCH64_GCC_7_1=/root/mydev/android_source/hikey970/tools/gcc-linaro-7.1.1-2017.08-x86_64_aarch64-linux-gnu/bin/
# l-loader/build_uefi.sh hikey970
编译后产生如下文件:
l-loader/ptable-aosp-64g.img(有些文档上说是ptable-aosp-32g.img)
l-loader/fip.bin
l-loader/l-loader.bin
把这三个文件复制到某个tools路径下(/root/mydev/android_source/hikey970/kernel/tools/)
这个路径下还有kernel的编译产物.

第二步: 关于kernel
# mkdir kernel
# cd kernel
# git clone https://github.com/96boards-hikey/linux.git -b hikey970-v4.9
# cd linux
# AARCH64_PATH="/root/mydev/android_source/hikey970/tools/aarch64-linux-android-4.9"
# TOOLS_PATH="/root/mydev/android_source/hikey970/kernel/tools/"
# export ARCH=arm64
# export CROSS_COMPILE=${AARCH64_PATH}/bin/aarch64-linux-android-
# make hikey970_defconfig
# make -j8
# make hisilicon/kirin970-hikey970.dtb
# cp -a arch/arm64/boot/Image ${TOOLS_PATH}
# cp -a arch/arm64/boot/dts/hisilicon/kirin970-hikey970.dtb ${TOOLS_PATH}

第三步: 关于AOSP
首先复制两个文件(kernel的编译产物)到AOSP的源码中,没有这两个文件是编译不成功的(官方文档中没有说明这点).
# cp /root/mydev/android_source/hikey970/kernel/linux/arch/arm64/boot/dts/hisilicon/kirin970-hikey970.dtb /root/mydev/android_source/hikey970/aosp/device/linaro/hikey-kernel/kirin970-hikey970.dtb-4.9
# cp /root/mydev/android_source/hikey970/kernel/linux/arch/arm64/boot/Image.gz /root/mydev/android_source/hikey970/aosp/device/linaro/hikey-kernel/Image.gz-hikey970-4.9
# source ./build/envsetup.sh
# lunch hikey970-userdebug
# make -j16
想要编译成功,还需要修改三个地方:
1.
# gedit /media/root/alexander/android_source/aosp/device/linaro/hikey/wpan/uim/Android.mk
改为: LOCAL_MODULE_TAGS := optional
2.
# gedit /media/root/alexander/android_source/aosp/out/build-hikey970.ninja
改为: --all-partitions '' (修改两个地方)
3.
# rm -rf /media/root/alexander/android_source/aosp/device/linaro/hikey/sepolicy/hostapd.te
编译成功后在/root/mydev/android_source/hikey970/aosp/out/target/product/hikey970目录下会生成
cache.img
system.img
userdata.img

第四步: 关于boot.img
# cd /root/mydev/android_source/hikey970/kernel/tools(此路径上面有提到)
# cp /root/mydev/android_source/hikey970/aosp/out/target/product/hikey970/ramdisk.img /root/mydev/android_source/hikey970/kernel/tools
在/root/mydev/android_source/hikey970/kernel/tools此路径下有下面文件:
fip.bin
Image
kirin970-hikey970.dtb
l-loader.bin
ptable-aosp-64g.img
ramdisk.img
build_kernel.sh这个脚本我是从下面这个网页里复制下来进行路径的修改后编译出boot.img文件.
https://blog.csdn.net/rushdj/article/details/84329639

从https://www.96boards.org/documentation/consumer/hikey/hikey970/build/linux-kernel.md.html
这个网页中得到的build_kernel.sh脚本我也试了,同样需要修改有关的路径,然后生成boot.img文件.

经过上面的操作,就得到了下面有关文件:
boot.img
cache.img
system.img
userdata.img
然后使用下面命令烧进去
fastboot flash boot boot.img
fastboot flash cache cache.img
fastboot flash system system.img
fastboot flash userdata  userdata.img
结果就是启动不了.



先把刚刚下载的压缩包解压出来，hikey970-aosp9

步骤1:)

$ mkdir android
$ cd    android

然后拉aosp源码:

$ repo init -u https://android.googlesource.com/platform/manifest -b android-9.0.0_r34
$ git clone https://github.com/96boards-hikey/android-manifest.git -b hikey970_v1.0 .repo/local_manifests
$ repo sync -j8 -c
$ source build/envsetup.sh
$ lunch hikey970-userdebug

步骤2:)
编译kernel根据这个链接: https://www.96boards.org/documentation/consumer/hikey/hikey970/build/linux-kernel.md.html

不同点在于执行./build_kernel.sh 这个命令前，从/system/core/mkbootimg/目录拷贝mkbootimg文件到kernel文件夹, 
执行完./build_kernel.sh这条命令后,执行make Image.gz-dtb

把生成的boot.img拷贝到之前解压的hikey970-aosp9这个文件里，替换掉


步骤3:)

    Copy kirin970-hikey970.dtb.dtb (kernel/hikey-linaro/arch/arm64/boot/dts/hisilicon/ kirin970-hikey970.dtb) to the device/linaro/hikey-kernel directory as file: kirin970-hikey970.dtb-4.9

    Copy the Image file (kernel/hikey-linaro/arch/arm64/boot/Image.gz-dtb) to the device/linaro/hikey-kernel directory as file: Image.gz-hikey970-4.9

步骤4:)
编译aosp，在android根目录下执行：

$ make -j8

步骤5:)
生成的cache.img、system.img和userdata.img拷贝到之前解压的hikey970-aosp9这个文件里，替换掉

步骤6:)
清除已经存在的模块

确认Hikey970的switches为以下模式
Switch 1 = ON
Switch 2 = OFF
Switch 3 = ON
Switch 4 = OFF

Hikey970上电，然后执行下面的命令
$ sudo fastboot devices

连接成功的话现象一般如下：
jerome@lemaker:~$ sudo fastboot devices
72CA418D028CEFA9     fastboot

然后执行下面的命令
$ hikey970-aosp9
$ sudo fastboot flash ptable prm_ptable.img
$ sudo fastboot flash xloader sec_xloader.img
$ sudo fastboot flash fastboot l-loader.bin
$ sudo fastboot flash fip fip.bin
$ sudo fastboot flash boot boot.img
$ sudo fastboot flash cache cache.img
$ sudo fastboot flash system system.img
$ sudo fastboot flash userdata userdata.img

烧录完成后，拔掉电源线，然后执行下面的步骤

步骤7:) 

把Hikey970的switches切换成下面的模式
Switch 1 = ON
Switch 2 = OFF
Switch 3 = OFF
Switch 4 = OFF

连接电源线上电


