在2017年，Linux内核代码，谷歌贡献度是3%，而华为占1.5%。
Android其实是具备公有性质，只要遵循Android的开源协议与开源机制，其他厂商完全可以在已经开源的 Android 之上发展自己的 Android 系统——只要遵循已经开源的 Android 的许可证约束即可。Android 系统主要使用的开源软件许可证有 GPL（Linux 内核）、LGPL（各种运行时函数库）、Apache（Dalvik 虚拟机及 Java 类库）。如果限制某些厂商不能用Andriod，显然也难以避免让其他OMD厂商、芯片厂商甚至软件开发商的利益以及上下游企业的利益受损，基于各自未来前景与利益考量，上下游参与开源联盟的企业也会抵制谷歌破坏开源协议的行为并作出一定的反制措施。
Google移动服务（GMS）是由谷歌提供的一系列应用和服务，包括Gmail，Chrome，Google地图等，为非开源，获得授权需经过谷歌测试。



https://blog.csdn.net/bluewhalerobot/article/details/80429652
hikey 970开发板刷官方的基础固件和Android系统
一.首先下载下面两个文件
git clone https://github.com/96boards-hikey/tools-images-hikey970
(其实是个zip文件,不是rar文件)
wget http://hihope.org/hihope/downLoadCenter/testDownFile?filename=20190403/hikey970_android_8_images.rar
hikey970_android_8_images.rar这个文件解压后有3个文件,为buildinfo.txt文件,image目录和log目录.
二.把image里的所有文件复制到tools-images-hikey970文件夹中
三.烧写分两种情况(开关不要弄错):
1.烧基础固件
烧好基础固件后也有了android系统,因此不需要再额外烧android系统.
可能这个操作只需要做一次,以后只要单纯烧android系统就行了.
	开关: On On On Off
	进行tools-images-hikey970目录
	修改recovery-flash.sh脚本:
	UEFI_BUILD_PATH=/home/qubo/tools-images-hikey970 ---> UEFI_BUILD_PATH=${PWD}
	运行recovery-flash.sh脚本
2.单纯烧android系统
	开关: On Off On Off
	进行tools-images-hikey970目录
	fastboot flash boot boot.img
	fastboot flash cache cache.img
	fastboot flash system system.img
	fastboot flash userdata userdata.img

编译AOSP源码时先需要作下面的操作
复制文件
cp /media/root/alexander/android_source/kernel/linux/arch/arm64/boot/dts/hisilicon/kirin970-hikey970.dtb /media/root/alexander/android_source/aosp/device/linaro/hikey-kernel/kirin970-hikey970.dtb-4.9
cp /media/root/alexander/android_source/kernel/linux/arch/arm64/boot/Image.gz-dtb /media/root/alexander/android_source/aosp/device/linaro/hikey-kernel/Image.gz-hikey970-4.9
修改文件
1.
subl device/linaro/hikey/wpan/uim/Android.mk
LOCAL_MODULE_TAGS := optional
2.
subl out/build-hikey970.ninja
--all-partitions
3.
rm -rf /media/root/alexander/android_source/aosp/device/linaro/hikey/sepolicy/hostapd.te

局部编译时有下面的错误
build/make/core/main.mk:758: error: CtsMediaStressTestCases.LOCAL_HOST_REQUIRED_MODULES : illegal value cts-dynamic-config : not a host module. If you want to specify target modules to be required to be installed along with your target module, add those module names to LOCAL_REQUIRED_MODULES instead.
因此作了下面的修改
---------->1
下面2个文件是修改操作
cts/tests/tests/media/Android.mk
cts/tests/signature/intent-check/Android.mk
把原来的
LOCAL_HOST_REQUIRED_MODULES := cts-dynamic-config
修改为
LOCAL_REQUIRED_MODULES := cts-dynamic-config
---------->2
下面3个文件都是删除操作
build/soong/androidmk/cmd/androidmk/android.go
(delete:129)
"LOCAL_HOST_REQUIRED_MODULES":         "host_required",
build/soong/android/androidmk.go
(delete:180)
a.AddStrings("LOCAL_HOST_REQUIRED_MODULES", a.Host_required...)
build/soong/android/prebuilt_etc_test.go
(delete:158)
"LOCAL_HOST_REQUIRED_MODULES":   {"hostModA", "hostModB"},


第一步: 关于bootloader
# mkdir bootloader
# cd bootloader
下载下面的文件:
	arm-trusted-firmware
	edk2
	l-loader
	OpenPlatformPkg
	tools-images-hikey970
	uefi-tools

# cd edk2
# ln -sf ../OpenPlatformPkg
# cd ..
修改l-loader/build_uefi.sh这个文件的某个bin路径
我的改成了:
"LINARO_GCC_7_1")
	# AARCH64_GCC_7_1=/opt/toolchain/gcc-linaro-7.1.1-2017.08-x86_64_aarch64-linux-gnu/bin/
	AARCH64_GCC_7_1=/root/mydev/android_source/hikey970/tools/gcc-linaro-7.1.1-2017.08-x86_64_aarch64-linux-gnu/bin/
# l-loader/build_uefi.sh hikey970
编译后产生如下文件:
l-loader/ptable-aosp-64g.img(有些文档上说是ptable-aosp-32g.img)
l-loader/fip.bin
l-loader/l-loader.bin
把这三个文件复制到某个tools路径下(/root/mydev/android_source/hikey970/kernel/tools/)
这个路径下还有kernel的编译产物.

第二步: 关于kernel
# mkdir kernel
# cd kernel
# git clone https://github.com/96boards-hikey/linux.git -b hikey970-v4.9
# cd linux
# AARCH64_PATH="/root/mydev/android_source/hikey970/tools/aarch64-linux-android-4.9"
# TOOLS_PATH="/root/mydev/android_source/hikey970/kernel/tools/"
# export ARCH=arm64
# export CROSS_COMPILE=${AARCH64_PATH}/bin/aarch64-linux-android-
# make hikey970_defconfig
# make -j8
# make hisilicon/kirin970-hikey970.dtb
# cp -a arch/arm64/boot/Image ${TOOLS_PATH}
# cp -a arch/arm64/boot/dts/hisilicon/kirin970-hikey970.dtb ${TOOLS_PATH}

第三步: 关于AOSP
首先复制两个文件(kernel的编译产物)到AOSP的源码中,没有这两个文件是编译不成功的(官方文档中没有说明这点).
# cp /root/mydev/android_source/hikey970/kernel/linux/arch/arm64/boot/dts/hisilicon/kirin970-hikey970.dtb /root/mydev/android_source/hikey970/aosp/device/linaro/hikey-kernel/kirin970-hikey970.dtb-4.9
# cp /root/mydev/android_source/hikey970/kernel/linux/arch/arm64/boot/Image.gz /root/mydev/android_source/hikey970/aosp/device/linaro/hikey-kernel/Image.gz-hikey970-4.9
# source ./build/envsetup.sh
# lunch hikey970-userdebug
# make -j16
想要编译成功,还需要修改三个地方:
1.
# gedit /media/root/alexander/android_source/aosp/device/linaro/hikey/wpan/uim/Android.mk
改为: LOCAL_MODULE_TAGS := optional
2.
# gedit /media/root/alexander/android_source/aosp/out/build-hikey970.ninja
改为: --all-partitions '' (修改两个地方)
3.
# rm -rf /media/root/alexander/android_source/aosp/device/linaro/hikey/sepolicy/hostapd.te
编译成功后在/root/mydev/android_source/hikey970/aosp/out/target/product/hikey970目录下会生成
cache.img
system.img
userdata.img

第四步: 关于boot.img
# cd /root/mydev/android_source/hikey970/kernel/tools(此路径上面有提到)
# cp /root/mydev/android_source/hikey970/aosp/out/target/product/hikey970/ramdisk.img /root/mydev/android_source/hikey970/kernel/tools
在/root/mydev/android_source/hikey970/kernel/tools此路径下有下面文件:
fip.bin
Image
kirin970-hikey970.dtb
l-loader.bin
ptable-aosp-64g.img
ramdisk.img
build_kernel.sh这个脚本我是从下面这个网页里复制下来进行路径的修改后编译出boot.img文件.
https://blog.csdn.net/rushdj/article/details/84329639

从https://www.96boards.org/documentation/consumer/hikey/hikey970/build/linux-kernel.md.html
这个网页中得到的build_kernel.sh脚本我也试了,同样需要修改有关的路径,然后生成boot.img文件.

经过上面的操作,就得到了下面有关文件:
boot.img
cache.img
system.img
userdata.img
然后使用下面命令烧进去
fastboot flash boot boot.img
fastboot flash cache cache.img
fastboot flash system system.img
fastboot flash userdata  userdata.img
结果就是启动不了.

/root/mydev/android_source/hikey970/aosp/device/linaro/hikey/hikey970/BoardConfig.mk
BOARD_USERDATAIMAGE_PARTITION_SIZE := 25769803776  # 24.0GB

/root/mydev/android_source/hikey970/aosp/kernel/hikey-linaro/arch/arm64/configs/hikey970_defconfig
CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE=y
CONFIG_BUILD_ARM64_APPENDED_KERNEL_IMAGE_NAME=Image.gz-dtb
CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE_NAMES=“hisilicon/kirin970-hikey970”

先把刚刚下载的压缩包解压出来，hikey970-aosp9

步骤1:)

$ mkdir android
$ cd    android

然后拉aosp源码:

$ repo init -u https://android.googlesource.com/platform/manifest -b android-9.0.0_r34
  repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-9.0.0_r39
  repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-8.1.0_r63
  repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b master

  cd .repo/manifests
  git reset --hard remotes/origin/android-9.0.0_r39
$ git clone https://github.com/96boards-hikey/android-manifest.git -b hikey970_v1.0 .repo/local_manifests
$ repo sync -j8 -c
  repo sync -j8 -f --force-sync
$ source build/envsetup.sh
$ lunch hikey970-userdebug

make -j$(nproc) ramdisk
make -j8 ramdisk
cd kernel
mkdir tools
cp ../out/target/product/hikey970/ramdisk.img tools/

步骤2:)
编译kernel根据这个链接: https://www.96boards.org/documentation/consumer/hikey/hikey970/build/linux-kernel.md.html

export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-android-
./build_kernel.sh

不同点在于执行./build_kernel.sh 这个命令前，从/system/core/mkbootimg/目录拷贝mkbootimg文件到kernel文件夹, 
执行完./build_kernel.sh这条命令后,执行make Image.gz-dtb

把生成的boot.img拷贝到之前解压的hikey970-aosp9这个文件里，替换掉


步骤3:)

    Copy kirin970-hikey970.dtb.dtb (kernel/hikey-linaro/arch/arm64/boot/dts/hisilicon/ kirin970-hikey970.dtb) to the device/linaro/hikey-kernel directory as file: kirin970-hikey970.dtb-4.9

    Copy the Image file (kernel/hikey-linaro/arch/arm64/boot/Image.gz-dtb) to the device/linaro/hikey-kernel directory as file: Image.gz-hikey970-4.9

    cp kernel/hikey-linaro/arch/arm64/boot/dts/hisilicon/kirin970-hikey970.dtb device/linaro/hikey-kernel/kirin970-hikey970.dtb-4.9

    cp kernel/hikey-linaro/arch/arm64/boot/Image.gz-dtb device/linaro/hikey-kernel/Image.gz-hikey970-4.9

步骤4:)
编译aosp，在android根目录下执行：

$ make -j8

步骤5:)
生成的cache.img、system.img和userdata.img拷贝到之前解压的hikey970-aosp9这个文件里，替换掉

步骤6:)
清除已经存在的模块

cutecom &
/dev/ttyXRUSB0

adb root && adb remount && 
adb push /media/root/alexander/android_source/aosp/out/target/product/hikey970/system/lib/libaudioclient.so /system/lib/ && 
adb push /media/root/alexander/android_source/aosp/out/target/product/hikey970/system/lib/libaudioflinger.so /system/lib/ && 
adb push /media/root/alexander/android_source/aosp/out/target/product/hikey970/system/lib64/libaudioclient.so /system/lib64/ && 
adb push /media/root/alexander/android_source/aosp/out/target/product/hikey970/system/lib64/libaudioflinger.so /system/lib64/ && 
adb reboot

adb root && adb remount && 
adb push /root/mydev/android_source/hikey970/aosp/out/target/product/hikey970/system/lib/libaudioclient.so /system/lib/ && 
adb push /root/mydev/android_source/hikey970/aosp/out/target/product/hikey970/system/lib/libaudioflinger.so /system/lib/ && 
adb push /root/mydev/android_source/hikey970/aosp/out/target/product/hikey970/system/lib64/libaudioclient.so /system/lib64/ && 
adb push /root/mydev/android_source/hikey970/aosp/out/target/product/hikey970/system/lib64/libaudioflinger.so /system/lib64/ && 
adb reboot

      out/target/product/hikey970/system/priv-app/Settings/Settings.apk
Copy: out/target/product/hikey970/system/priv-app/Settings/oat/arm64/Settings.vdex

确认Hikey970的switches为以下模式
Switch 1 = ON
Switch 2 = OFF
Switch 3 = ON
Switch 4 = OFF

Hikey970上电，然后执行下面的命令
$ sudo fastboot devices

连接成功的话现象一般如下：
jerome@lemaker:~$ sudo fastboot devices
72CA418D028CEFA9     fastboot

然后执行下面的命令
$ hikey970-aosp9
fastboot flash ptable prm_ptable.img && 
fastboot flash xloader sec_xloader.img && 
fastboot flash fastboot l-loader.bin && 
fastboot flash fip fip.bin && 
fastboot flash boot boot.img && 
fastboot flash cache cache.img && 
fastboot flash system system.img && 
fastboot flash userdata userdata.img

烧录完成后，拔掉电源线，然后执行下面的步骤

步骤7:) 

把Hikey970的switches切换成下面的模式
Switch 1 = ON
Switch 2 = OFF
Switch 3 = OFF
Switch 4 = OFF

连接电源线上电

adb root
adb remount
adb shell mount -o rw,remount /

USB OTG:USB On-The-Go 通常缩写为 USB OTG，是 USB2.0 规格的补充标准。它可使 USB 设备，例如播放器或手机，从 USB 周边设备变为 USB 主机，与其他 USB 设备连接通信。在 正常情况下，这些支持 OTG 的 USB 设备和 USB 主机(如台式机或者手提电脑)，仍然作为 USB 周边设备使用。 
Android 平台下 USB 开发有以下两种模式：
USB Host Mode:
顾名思义，Android 设备作为主机，需要安卓设备支持 OTG 接头。常见应用场景诸如连接数码相机、键盘、鼠标、游戏手柄等硬件。
USB Accessory Mode:
这种模式下Android设备承担外设的角色。
应用场景诸如连接机器人控制器、音响、医疗器材等，
当然前提是这些设备支持与Android设备连接并且遵守
Android accessory communication protocol。
这种模式可以让不具有host能力的Android设备与其他硬件交互。

通用串行总线（USB）目前已经成为了最标准的接口，用于提供系统一个可靠且低成本的数字连接，目前在使用方面已经超越了电脑的范畴，并已广泛应用在工业、医疗、消费电子、通信网络等等。
RS232接口长期广泛存在于在各种应用领域，随着安卓手机平板的大量上市，安卓系统下通过USB转RS232接口接入外设的应用需求也开始变得强烈起来。
1.手机USB接口通信特点
1.1 使用方便
即插即用，可热插拔，具有自动配置能力，用户只要简单地将外设插人到手机就能自动识别和配置uSB设备。
1.2 通用性强
目前安卓手机、平板都具备USB接口，连 接灵活，易扩展。
1.3 速度快
USB2.0 ：理论速度是每秒480Mbps（约每秒60MB） 
USB3.0 ：理论速度能够达到每秒5Gbps（约为每秒625MB）
1.4 可采用总线供电
USB2.0总线提供最大达5v电压、500mA电流，USB3.0 可达1A。大部分USB外设无需单独的供电系统。 
由于 USB 的诸多特点，在PC的外围设备中，取代了大部分传统的接口。但在智能仪器仪表中，还大量地使用RS一232C接口。随着智能仪器仪表控制系统的日益复杂，数据采集量的增大，迫切需要寻求一种更高速、安全、方便的通信形式。USB接口的特点，恰好满足这种应用要求，USB产品进人智能仪器仪表和工业控制领域将是必然的。
Micro USB接口是USB 2.0标准的一个便携版本，支持OTG，目前除苹果公司产品之外，先进市面上几乎所有的移动设备都采用了Micro-USB接口。
USB通信过程 
一般的USB主机和设备之间遵循主从通信的原理，每一次的数据传输都是又主机发起。如果主机要输出数据，则先发一个握手包，通知设备。然后发送数据，设备接收到数据后，再发送一个确认包。如果主机要输入数据，也是先发一个握手包，通知设备。设备然后将准备好的数据发送给主机。主机再给设备一个确认包。
体系架构
从物理结构上，USB系统是一个星形结构。其包含三类硬件设备: USB主机(USB HOST)、 USB设备(USB DEVICE)和USB集线器(USB HUB)。 
USB总线上的物理连接是一个分层的星形拓扑，处于每个星形拓扑中央的是HUB集线器，在主机与HUB之间，HUB与HUB之间，HUB与设备之间都是点对点的连接。
USB HOST对USB系统进行管理、每毫秒产生一帧数据、发送配置请求对USB设备进行配置、管理和恢复总线上的错误。 
USB HUB用于设备扩展连接，所有USB DEVICE都连接在USB HUB的端口上。 
USB DEVICE接收USB总线上的所有数据包，通过数据包的地址域来判断是不是发给自己的数据包：若地址不符，则简单地丢弃该数据包；若地址相符，则通过响应USB HOST的数据包与USB HOST进行数据传输。
从逻辑结构上看，每个USB逻辑设备都直接与USB HOST进行数据传输。与传统接口以硬件手段实现握手的方法不同，USB接口使用“软握手”方法。
USB的软握手机制是透过三个层次的驱动程序实现的，在这中间起到关键作用的是设备驱动程序，该程序在主机与设备之间建立起至少一个管道。管道有两种类型：流管道和消息管道。其中有一个最重要的消息管道是“缺省控制管道”，这个管道在设备一加电的时候就存在了，它提供设备的配置和状态等信息。主机与设备之间的联络就是通过消息管道实现的。
USB协议栈驱动程序的主要作用是将设备与相应的设备驱动程序连接起来。因为USB支持的设备很多，而每个具体的设备都有自己对应的设备驱动程序。对于某一具体设备来说，使用哪个驱动来管理，就要由协议栈驱动程序通过读取设备描述符进行挑选。选择好驱动程序之后，协议栈驱动程序还要给USB设备分配地址。
管道建立起来之后，数据的传输控制则由USB接口驱动程序负责完成了。在这里，主机占有绝对主导权。设备发生事件时通过消息管道报告给主机，主机伺机向设备发送命令，开通流管道，发送或接收数据包。主机与设备之间以数据数据包的形式进行传送，显然这与网络上数据传输的方式相同，是一种异步数据传输模式。
USB Host简述
USB Host,中文意思是USB主模式，是相对于USB Accessory(USB副模式)来说的。如果Android工作在USB Host模式下，则连接到Android上的USB设备把Android类似的看作是一台主机，例如将鼠标、键盘插入则可以使用键盘、鼠标来操作Android系统。
而USB Accessory模式表示将Android设备类似当作一个USB的键盘、鼠标、U盘插入到电脑主机上一样使用，这两种模式在Android API level-12以上才支持，即Android3.1及更高的版本支持这两种模式。
USB（手机）<–>UART（外设）
即手机与外设之间利用USB-UART转接器，实现手机与外设的串口通信。 
USB-UART转换器是实现USB与RS-232/RS-485/RS-422等串口设备相互通讯的一种协议转换装置（USB协议-串行通信协议）。在通信主机(USB)和RS-232/RS-485/RS-422串口设备之间可以实现数据的双向传输。
 USB host：USB主设备，可以从另外一个USB 从设备中取得数据，包括USB host控制器和USB host协议。有主就有从，host设备与USB device或USB slave从设备相对应。
       USB OTG：On The Go，正在进行中的意思，直接传输，就是可以从一个机器直接传到另一个机器中。直接的意思为用户不需要其他的辅助，比如软件驱动，硬件接口转换等。
       USB HUB：USB扩展/集线器，一种可以将一个USB接口扩展为多个（通常为4个），可以使这些接口同时使用的仪器。Android4.4系统的平板电脑如NEXUS 7不支持USB HUB。
     USB-HID：全称为Human Interface Device，能直接与人交互的设备，例如键盘、鼠标与游戏杆等，操作系统会自带HID设备的驱动程序。
由于USB host开发主要用到的包有
android.hardware.usb.UsbConstants;
android.hardware.usb.UsbDevice;
android.hardware.usb.UsbDeviceConnection;
android.hardware.usb.UsbEndpoint;
android.hardware.usb.UsbInterface;
android.hardware.usb.UsbManager;
android.hardware.usb.UsbRequest;
所以需要确认Android系统根目录下的权限文件有没有android.hardware.usb.host.xml文件和tablet_core_hardware.xml或者handheld_core_hardware.xml。如果是平板就是tablet配置文件，手机就是handheld配置文件。具体操作打开ES或RE文件浏览器、根目录、/system/etc/permissions。查看这两个文件。
UsbDevice
代表一个USB设备的类，每个设备都包含了一个或多个接口，每个接口又包含一个或多个节点用来与此设备传输数据。
UsbInterface
代表USB设备的一个接口，注意：UsbInterface本身是一个类，并不是一个接口。
UsbEndpoint
代表一个接口的某个节点的类。
UsbDeviceConnection
代表USB连接的一个类。用此连接可以想USB设备发送和接收数据，可以通过调用该方法openDevice(UsbDevice) 来得到该类的一个实例。
1)bulkTransfer(UsbEndpoint endpoint, byte[] buffer, int length, int timeout)
通过给定的endpoint来进行大量的数据传输，传输的方向取决于该节点的方向，buffer是要发送或接收的字节数组，length是该字节数组的长度。传输成功则返回所传输的字节数组的长度，失败则返回负数。
2)controlTransfer(int requestType, int request, int value, int index, byte[] buffer, int length, int timeout)
该方法通过0节点向此设备传输数据，传输的方向取决于请求的类别，如果requestType为USB_DIR_OUT则为写数据，USB_DIR_IN, 则为读数据。
第一：USB（手机）<--->USB（外设），就是手机与外设直接通过USB线进行通讯。
第二：USB（手机）<--->UART（外设），即手机与外设通过USB转接成串口，再与外设通信。

USB转串口模块
带供电功能的OTG线

gnome-tweak-tool(优化工具)
扩展--->Window list

1. UART Debug无法进行console，只能看到输出
     HiKey970自带了一个UART Debug串口，但只能看到串口的输出信息，而无法进入console，经过查看HiKey970的硬件文档，发现如果需要进入console,则需用转接板接PIN11和PIN13，而不要用UART Debug，这样调试信息既可以输出，也可以进入console了
2. 使用adb connect 出现device offline
   首先执行一下adb tcpip 5555  然后再执行adb connect ipaddress即可
3. 烧写编译后的固件打不开WiFi,原因为wpa_supplicant无法启动
    修改device/linaro/hikey/init.common.rc的98行-c/data/misc/wifi/wpa_supplicant.conf为-c/etc/wifi/wpa_supplicant.conf

wifi问题的解决方法
修改device/linaro/hikey/init.common.rc的98行-c/data/misc/wifi/wpa_supplicant.conf为-c/etc/wifi/wpa_supplicant.conf
把/etc/wifi/wpa_supplicant.conf复制到/data/misc/wifi/中去，
然后把/data/misc/wifi/wpa_supplicant.conf的权限改为777,
每次重启后setenforce 0








