在Android API <= 20(Android5.0之前的版本)中Google支持的
Camera Preview Callback的YUV常用格式有两种：
一个是NV21，一个是YV12.

使用android camera得到的yuv数据是NV21格式,
如果想把这种格式的数据编码为YUV420SP格式(也就是NV12格式),
那么需要把NV21转成NV12.
private void NV21ToNV12(byte[] nv21, byte[] nv12, int width, int height) {
    if (nv21 == null || nv12 == null) {
        return;
    }
    int framesize = width * height;
    int i = 0, j = 0;
    System.arraycopy(nv21, 0, nv12, 0, framesize);
    for (i = 0; i < framesize; i++) {
        nv12[i] = nv21[i];
    }
    for (j = 0; j < framesize / 2; j += 2) {
        nv12[framesize + j - 1] = nv21[j + framesize];
    }
    for (j = 0; j < framesize / 2; j += 2) {
        nv12[framesize + j] = nv21[j + framesize - 1];
    }
}

Android平台
使用Camera采集预览NV21格式数据，
使用AudioRecord采集音频pcm数据，
使用MediaCodec分别进行h264和AAC硬编码，
通过MediaMuxer合成MP4.

手机预览
SurfaceView GLSurfaceView OpenGL TextureView
截图,拍摄视频
预览数据

<uses-permission android:name="android.permission.CAMERA" />
<uses-feature android:name="android.hardware.camera" />
<uses-feature android:name="android.hardware.camera.autofocus" />
    
Camera2
android.hardware.camera2
Android 5.0 （API Level 21）重新设计Camera，并提供了一个全新的API——Camera2。
这些API不仅大幅提高了Android系统拍照的功能，还能支持RAW照片输出，
甚至允许程序调整相机的对焦模式、曝光模式、快门等。


Camera2主要类的有关知识:
1.
CameraManager
CameraManager mCameraManager = (CameraManager) context.getSystemService(
																	Context.CAMERA_SERVICE);
摄像头管理器，用来获取CameraDevice对象，获取Camera属性.
在Camera打开之前主要操作CameraManager，打开后主要操作CameraCaptureSession.
2.
CameraCharacteristics
CameraCharacteristics mCameraCharacteristics = 
				mCameraManager.getCameraCharacteristics(currentCameraId);
摄像头属性，相当于原CameraInfo。通过CameraManager获取制定id的摄像头属性.
通过获取Camera属性信息，配置Camera输出，如FPS，大小，旋转等.
3.
CameraDevice
CameraDevice.StateCallback
代表摄像头，相当于于早期的Camera类。
用于创建CameraCaptureSession和关闭摄像头。
通过CameraManager打开Camera，在StateCallback中会得到CameraDevice实例。
CameraDevice是Camera2中抽象出来的一个对象，直接与系统硬件摄像头相联系。
因为不可能所有的摄像头都会支持高级功能（即摄像头功能可被分为limit 和full 两个级别），
当摄像头处于limited 级别时候，此时Camera2和早期的Camera功能差不多，
除此之外在Camera2架构中，CameraDevice还承担其他重要任务：
    通过CameraDevice.StateCallback监听摄像头的
    状态（主要包括onOpened、onClosed、onDisconnected、onErro四种状态）

    管理CameraCaptureSession，-通过方法
    createCaptureSession(List outputs, 
		    CameraCaptureSession.StateCallback callback,
		    Handler handler)
    createReprocessableCaptureSession(InputConfiguration inputConfig, 
		    List outputs, 
		    CameraCaptureSession.StateCallback callback, 
		    Handler handler)
    方法创建会话（其中第三个参数：
    The handler on which the callback should be invoked,
     or null to use the current thread’s looper.），
     通常会在CameraDevice.StateCallback中调用对应方法创建预览会话。

    管理CaptureRequest，主要包括通过
    createCaptureRequest（int templateType）创建捕获请求，
    在需要预览、拍照、再次预览的时候都需要通过创建请求来完成。
4.
public void createCaptureSession(List<Surface> outputs,
                                 CameraCaptureSession.StateCallback callback, 
                                 Handler handler)
由CameraDevice对象调用的方法
参数说明:
第一个参数是一个范型为Surface的List，这里的Surface就是我们用来创建流的，
一般如果没有特殊的要求，那我们只需要两个Surface，一个提供预览，一个提供拍照.
预览的Surface就是相机预览区域，buffer轮转时，预览区的buffer就是要从
这个预览Surface当中获取的，这个Surface一定要正确，否则就会导致session创建失败，
预览区就会黑屏了，我们在平时的工作中经常碰到这样的情况；而至于拍照Surface，
我们一般使用ImageReader对象来获取，ImageReader是系统提供的一个类，它的创建过程
已经为我们创建好了一个Surface，我们直接使用它来当作拍照Surface，当拍照成功后，
我们就可以从ImageReader.OnImageAvailableListener内部类的onImageAvailable回调
方法中获取到一个ImageReader对象，再调用getPlanes()获取到Plane数组，
一般取第一个Plane，继续调用getBuffer()就可以获取到拍摄的照片的byte数组了，
第二个参数callback的类型为
frameworks\base\core\java\android\hardware\camera2\CameraCaptureSession.java
类的内部类StateCallback，和openCamera一样，当session创建成功后，
framework也会通过这个回调接口的
public abstract void onConfigured(@NonNull CameraCaptureSession session)
方法返回一个CameraCaptureSession对象给我们，
而真正的实现是一个CameraCaptureSessionImpl对象，我们可以使用它来作很多的工作，
比如断开session连接调用abortCaptures()；拍照调用capture()方法；
下次预览调用setRepeatingRequest；停预览调用stopRepeating()，
这里的设计和openCamera是完全一样的。第三个参数Handler的作用和openCamera也一样，
还是为了保证线程不发生切换，我们在应用进程的哪个工作线程中执行createCaptureSession，
那么framework回调我们时，也会通过这个handler把回调消息发送到
当前handler线程的Looper循环上。
CameraCaptureSession.CaptureCallback
CameraCaptureSession.StateCallback
CaptureResult
Camera打开后，我们就主要和CameraCaptureSession打交道了。
CameraCaptureSession建立了一个和Camera设备的通道，
当这个通道建立完成后就可以向Camera发送请求获取图像。
系统向摄像头发送 Capture 请求，而摄像头会返回 CameraMetadata，
这一切都是在由对应的CameraDevice创建的CameraCaptureSession 会话完成，
当程序需要预览、拍照、再次预览时，都需要先通过会话.
CameraCaptureSession一旦被创建，直到对应的CameraDevice关闭才会死掉。
虽然CameraCaptureSession会话用于从摄像头中捕获图像，
但是只有同一个会话才能再次从同一摄像头中捕获图像。
另外，创建会话是一项耗时的异步操作，可能需要几百毫秒，
因为它需要配置相机设备的内部管道并分配内存缓冲区以将图像发送到所需的目标，
因而createCaptureSession和createReprocessableCaptureSession
会将随时可用的CameraCaptureSession发送到提供的监听器的onConfigured回调中。
如果无法完成配置，则触发onConfigureFailed回调，并且会话将不会变为活动状态。
最后需要注意的是，如果摄像头设备创建了一个新的会话，那么上一个会话是被关闭的，
并且会回调与其关联的onClosed，如果不处理好，当会话关闭之后再次调用会话的
对应方法那么所有方法将会跑出IllegalStateException异常。
关闭的会话清除任何重复的请求（和调用了stopRepeating()方法类似），
但是在新创建的会话接管并重新配置摄像机设备之前，
关闭的会话仍然会正常完成所有正在进行的捕获请求。
简而言之，在Camera2中CameraCaptureSession承担很重要的角色：
		管理CameraCaptureSession.StateCallback状态回调，
		用于接收有关CameraCaptureSession状态的更新的回调对象，
		主要回调方法有两个当CameraDevice 完成配置，
		对应的会话开始处理捕获请求时触发
		onConfigured(CameraCaptureSession session)方法，
		反之配置失败时候触发onConfigureFailed(CameraCaptureSession session)方法。
		
		管理CameraCaptureSession.CaptureCallback捕获回调，
		用于接收捕获请求状态的回调，当请求触发捕获已启动时；捕获完成时；
		在捕获图像时发生错误的情况下；都会触发该回调对应的方法。
		
		通过调用方法capture(CaptureRequest request, 
												CameraCaptureSession.CaptureCallback listener,
												Handler handler)
		提交捕获图像请求（Submit a request for an image 
		to be captured by the camera device.）即拍照，
		其中该请求定义了捕获单个图像的所有参数，包括传感器，镜头，闪光灯和后处理参数，
		每一次请求的结果将产生一个CaptureResult，
		可以为一个或多个Surface生成新的帧，然后通过CaptureRequest.Builder
		的addTarget(Surface)方法附着到对应的Surface上显示，
		而且这个参数Surface必须是会话创建时候的一个子集，
		会话一次可以处理多个常规和重新处理请求。
		但如果只有常规请求或重新处理请求在进行，则以先进先出的顺序处理它们；
		如果两者都在进行中则分别以各自的先进先出顺序处理他们；
		然而，处理常规请求和重新处理请求的顺序并不是特定的，换言之，
		一个常规请求在下一个常规请求提交前被处理，同理重新处理请求也一样，
		但是一个常规请求不一定是在下一个重新处理请求提交之前被处理。
		通过capture方法提交的请求处理优先级比通过
		其他方式（ setRepeatingRequest(CaptureRequest, 
		CameraCaptureSession.CaptureCallback, Handler) 
		或者setRepeatingBurst(List, 
		CameraCaptureSession.CaptureCallback, Handler)）
		提交的请求的处理优先级高，一旦当前的repeat / repeatBurst处理完成，
		就会被处理。最后一点，所有CaptureSession可用于从相机捕获图像，
		但只有由createReprocessableCaptureSession创建的会话才可以提交重新处理捕获请求，
		将重新处理请求提交到常规捕获会话将导致IllegalArgumentException。
		
		通过调用方法setRepeatingRequest(CaptureRequest request,
									 CameraCaptureSession.CaptureCallback listener, 
									 Handler handler)
		请求不断重复捕获图像，即实现预览.
		
		通过方法调用stopRepeating()实现停止捕获图像，即停止预览.
5.
CameraRequest和CameraRequest.Builder
CameraRequest.Builder配置CameraRequest，具体功能就是告诉Camera想要什么样的图像。
Builder中主要结构是一个Map。Builder构建后得到CameraRequest。
然后通过CameraCaptureSession发送CameraRequest。
CameraRequest代表了一次捕获请求，
而CameraRequest.Builder用于描述捕获图片的各种参数设置，
包含捕获硬件（传感器，镜头，闪存），对焦模式、曝光模式，处理流水线，
控制算法和输出缓冲区的配置。然后传递到对应的会话中进行设置，
CameraRequest.Builder则负责生成CameraRequest对象。
当程序调用setRepeatingRequest()方法进行预览时，或调用capture()方法进行拍照时，
都需要传入CameraRequest参数。
CameraRequest可以通过CameraRequest.Builder来进行初始化，
通过调用createCaptureRequest来获得。
6.
CaptureResult
CaptureRequest描述是从图像传感器捕获单个图像的结果的子集的对象。
（CaptureResults are produced by a CameraDevice after 
processing a CaptureRequest）
当CaptureRequest被处理之后由CameraDevice生成。



编码流程:
1.
检查权限
if (ContextCompat.checkSelfPermission(getActivity(), 
															Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {
    requestCameraPermission();
    return;
}
2.
获取CameraManager
CameraManager mCameraManager = (CameraManager) context.getSystemService(
																	Context.CAMERA_SERVICE);
3.
获取Camera设备的摄像头列表
CameraManager中能够获取CameraID的列表，一般都是前置相机和后置相机。
String[] cameraIdList = mCameraManager.getCameraIdList();
4.
获取Camera设备属性
拿到对应的CameraID后，可以通过CameraManager查询到该相机的属性信息，包括：
    硬件兼容信息
    orientation
    facing
    FPS Range
    Frame Size
    Frame Format
//获取摄像头的详细参数和支持的功能
CameraCharacteristics mCameraCharacteristics = 
mCameraManager.getCameraCharacteristics(cameraId);
//Device Level
int deviceLevel = mCameraCharacteristics.get(
				CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL); 
//旋转角度
mCameraRotate = mCameraCharacteristics.get(
										CameraCharacteristics.SENSOR_ORIENTATION);
StreamConfigurationMap streamConfigurationMap = 
					mCameraCharacteristics.get(
								CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP); 
//支持的分辨率
mOutputSizes = streamConfigurationMap.getOutputSizes(SurfaceTexture.class);
//FPS
Range<Integer>[] fpsRanges = 
mCameraCharacteristics.get(
				CameraCharacteristics.CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES);
//选择合适分辨率
5.
打开Camera
openCamera(String cameraId, 
						CameraDevice.StateCallback callback, 
						Handler handler)
mCameraManager.openCamera(currentCameraId, mStateCallback, mMainHandler);
Camera2中有两个StateCallback：
    CameraDevice.StateCallback
    CameraCaptureSession.StateCallback
private CameraDevice.StateCallback mStateCallback = 
														new CameraDevice.StateCallback() {
    @Override
    public void onOpened(@NonNull CameraDevice camera) {
        mCameraDevice = camera;
        //Create Camera Session
    }

    @Override
    public void onDisconnected(@NonNull CameraDevice camera) {
        //Close Camera
        //...
    }

    @Override
    public void onError(@NonNull CameraDevice camera, int error) {
        //...
    }
};
6.
创建CameraCaptureSession
这部分核心是Surface和CameraCaptureSession.StateCallback：
Surface是Camera的输出，可以添加多个；
CameraCaptureSession.StateCallback: Session是否创建成功。
try {
    surfaceTexture.setDefaultBufferSize(sWidth, sHeight);
    mCaptureRequestBuilder = mCameraDevice.createCaptureRequest(
    																				CameraDevice.TEMPLATE_RECORD);
    List<Surface> surfaces = new ArrayList<Surface>();
    mPreviewSurface = new Surface(surfaceTexture);
    surfaces.add(mPreviewSurface);
    mCaptureRequestBuilder.addTarget(mPreviewSurface);
    mCameraDevice.createCaptureSession(surfaces, 
    										new CameraCaptureSession.StateCallback() {
        @Override
        public void onConfigured(
        				CameraCaptureSession cameraCaptureSession) {
            mCameraCaptureSession = cameraCaptureSession;
            //Config Capture Request
        }

        @Override
        public void onConfigureFailed(
        				CameraCaptureSession cameraCaptureSession) {
        }
    }, 
    mMainHandler);
} catch (CameraAccessException e) {
    e.printStackTrace();
}
7.
配置CaptureRequest
CaptureRequest的配置项非常多，可以配置防抖，对焦，曝光......
CaptureRequest是Camera2的核心，主要有两大类：
    capture：只请求一帧图像，可以重复请求，每次请求的配置可以不同。
    setRepeatingRequest：连续请求图像，每帧的请求配置相同，
												    如果配置改变，比如改变了曝光时间，需要停止request，
												    从新Build Request然后重新请求。
try {
    mCaptureRequestBuilder.set(CaptureRequest.CONTROL_MODE, 
    														CameraMetadata.CONTROL_MODE_AUTO);
    mCaptureRequest = mCaptureRequestBuilder.build();
    mCameraCaptureSession.setRepeatingRequest(mCaptureRequest, 
    													mSessionCaptureCallback, mMainHandler);
} catch (CameraAccessException e) {
    e.printStackTrace();
}
CameraCaptureSession.CaptureCallback：捕获的结果，比如是否对焦成功等

看androidCamera这个项目

有关摄像方面定义的常量:
private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
static {
    ORIENTATIONS.append(Surface.ROTATION_0, 90);
    ORIENTATIONS.append(Surface.ROTATION_90, 0);
    ORIENTATIONS.append(Surface.ROTATION_180, 270);
    ORIENTATIONS.append(Surface.ROTATION_270, 180);
}

在进行capture的时候有这样一段代码：
// ①
int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));

// ②
private int getOrientation(int rotation) {
    // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
    // We have to take that into account and rotate JPEG properly.
    // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.
    // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
    return (ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
}

// ③
mSensorOrientation = characteristics.get(
    CameraCharacteristics.SENSOR_ORIENTATION);

// ②
该方法返回的是当前屏幕相对于“自然方向的旋转角度”，
所谓的自然方向就是：手机竖屏，平板横屏。
返回值是上面列举的四种。
例如，如果一个设备自然方向是竖屏，
当将其横向放置的时候，
返回值要么是Surface.ROTATION_90，
或者Surface.ROTATION_270，取决于顺逆时针的转动。

屏幕上绘图的角度旋转与物理设备的旋转方向正好相反，
例如，如果设备相对于自然方向逆时针旋转90度，
那么绘图需要顺时针旋转90度才能保证弥补渲染的改变，
即返回值是Surface.ROTATION_90。

拍照方向依然为Sensor的方向，也就是横屏方向
CaptureRequest.JPEG_ORIENTATION的值是针对顺时针旋转而言的





OrientationEventListener



















































