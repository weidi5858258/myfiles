git commit 编辑器
git commit -m 默认使用nano，觉得不爽，改成vim吧。
在 .gitconfig (在根目录下)的 [core] 段中加上 editor=vim

git恢复被修改的文件
恢复到最后一次提交的改动
	git checkout -- + 需要恢复的文件名
	git checkout -- android/jni.txt

如果该文件已经 add 到暂存队列中，上面的命令就不灵光喽
需要先让这个文件取消暂存：
	git reset HEAD -- + 需要取消暂存的文件名
然后再使用第一条命令。

在编译git库拉下来的代码时，往往会产生一些中间文件，这些文件我们根本不需要，尤其是在成产环节做预编译，检查代码提交是否能编译通过这种case时，我们往往需要编译完成后不管正确与否，还原现场，以方便下次sync代码时不受上一次的编译影响。
# 删除 untracked files
git clean -f
# 连 untracked 的目录也一起删掉
git clean -fd
# 连 gitignore 的untrack 文件/目录也一起删掉 
（慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）
git clean -xfd
# 在用上述 git clean 前，强烈建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删
git clean -nxfd
git clean -nf
git clean -nfd

git查看项目地址
git remote -v

git stash
git pull
git stash pop stash@{0}

（1）git stash save "save message"  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。
（2）git stash list  ：查看stash了哪些存储
（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}
（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p
（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} 
（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}
（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储
（8）git stash clear ：删除所有缓存的stash

没有add的情况下
git checkout 需要还原的文件名
已经add的情况下
git reset HEAD 需要取消暂存的文件名
git checkout 需要还原的文件名
还原所有修改过的文件
git checkout .

git命令取别名
git config --global alias.unstage 'reset HEAD --'
git config --global alias.restore 'checkout --'
即:
git unstage README.md
git restore README.md

git rebase --abort

把branchA merge to branchB上
git checkout branchB
git merge --no-ff branchA

git cherry-pick
git commit --amend

git remote -v



想要查看安卓源码版本，一般有两个方法：
1，如果是已经编译过的，则会在源码下生成build.prop文件，我们可以通过命令查找文件
find -name build.prop
然后再打开查看版本信息。
2，如果未编译过，在源码目录下的build/core/version_defaults.mk文件中也有版本信息


新建远程分支
$ git checkout -b dbg_lichen_star
把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）：
$ git push origin dbg_lichen_star:dbg_lichen_star
使用git branch -a查看所有分支，会看到remotes/origin/dbg_lichen_star这个远程分支，说明新建远程分支成功。
删除远程分支
$ git push origin --delete dbg_lichen_star
如果您想要为此分支创建跟踪信息，您可以执行：
$ git branch --set-upstream-to=origin/dbg_lichen_star

删除本地分支 
命令行 : $ git branch -D <BranchName>


# git pull
当前分支没有跟踪信息。
请指定您要变基到哪一个分支。
详见 git-pull(1)。

    git pull <remote> <branch>

如果您想要为此分支创建跟踪信息，您可以执行：

    git branch --set-upstream-to=origin/<branch> feature-focuspreview-textureview

如果您想要为此分支创建跟踪信息,您可以执行:
$ git branch --set-upstream-to=origin/master

#git初始化
git init
#设置remote地址
git remote add  origin 地址
#获取远程仓库master分支上的内容
git pull origin master
#将当前分支设置为远程仓库的master分支
git branch --set-upstream-to=origin/master master
#将全部文件加入git版本管理 .的意思是将当前文件夹下的全部文件放到版本管理中
git add .
#提交文件 使用-m 编写注释
git commit -m "注释"
#推送到远程分支
git push
git push --set-upstream origin master













































